//
// Lam Reference Compiler
// Copyright (C) 2015  Wael El Oraiby
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

//
// Note: This file complexity is going to be reduced and the error handling is
//       going to be far improved.
//
%{
open UntypedAst
open System
%}

%start start

%token <Constant> SINT64
%token <Constant> REAL64
%token <Constant> STRING
%token <Constant> CHAR
%token <Constant> TRUE
%token <Constant> FALSE

%token <Identifier> IDENTIFIER

%token <TokenInfo>  LEFT_BRACE
%token <TokenInfo>  RIGHT_BRACE
%token <TokenInfo>  LEFT_BRACK
%token <TokenInfo>  RIGHT_BRACK
%token <TokenInfo>  LEFT_PAREN
%token <TokenInfo>  RIGHT_PAREN
%token <TokenInfo>  LEFT_HASH
%token <TokenInfo>  RIGHT_HASH
%token <TokenInfo>  COMMA
%token <TokenInfo>  COL
%token <TokenInfo>  DOT
%token <TokenInfo>  SC

%token <TokenInfo>  OP_LEQ
%token <TokenInfo>  OP_GEQ
%token <TokenInfo>  OP_EQ
%token <TokenInfo>  OP_LT
%token <TokenInfo>  OP_GT

%token <TokenInfo>  OP_LAND
%token <TokenInfo>  OP_LOR
%token <TokenInfo>  OP_LNOT

%token <TokenInfo>  OP_ADD
%token <TokenInfo>  OP_SUB
%token <TokenInfo>  OP_MUL
%token <TokenInfo>  OP_DIV
%token <TokenInfo>  OP_MOD

%token <TokenInfo>  OP_DISJ

%token <TokenInfo>  OP_AND
%token <TokenInfo>  OP_OR
%token <TokenInfo>  OP_XOR
%token <TokenInfo>  OP_NOT

%token <TokenInfo>  KW_MODULE
%token <TokenInfo>  KW_ENTITY
%token <TokenInfo>  KW_STATE
%token <TokenInfo>  KW_RULE


%token EOF

%type <Declaration list>    start
%type <Declaration>         module
%type <Conjunctions>        conjunction
%type <Equation>            mul_exp
%type <Equation>            add_exp
%type <BooleanExp>          boolean_exp

%%

start       : document                          { $1 }
                                                
document    : EOF                               { [] }
            | module_list                       { List.rev $1 }
                                                
identifier  : IDENTIFIER                        { $1 }

entity      : KW_ENTITY identifier entity_args entity_body  { { Entity.Name = $2; Args = $3; Statements = $4 } }

entity_args : LEFT_PAREN args RIGHT_PAREN       { List.rev $2 }

args        : identifier                        { [ $1 ] }
            | args COMMA identifier             { $3 :: $1 }

entity_body : LEFT_BRACE rs_list RIGHT_BRACE    { List.rev $2 }

rs_list     :                                   { [] }
            | rule                              { [ $1 ] }
            | state                             { [ $1 ] }
            | rs_list rule                      { $2 :: $1 }
            | rs_list state                     { $2 :: $1 }


conjunction : identifier                        { [ RuleElem.Identifier $1 ] }
            | boolean_exp                       { [ RuleElem.BooleanExp $1 ] }
            | conjunction identifier            { (RuleElem.Identifier $2) :: $1 }
            | conjunction boolean_exp           { (RuleElem.BooleanExp $2) :: $1 }

disjunction : conjunction                       { [ $1 ] }
            | disjunction OP_DISJ conjunction   { $3 :: $1 }

term        : identifier                        { Equation.Term (Term.Identifier $1) }
            | SINT64                            { Equation.Term (Term.Const $1) }
            | REAL64                            { Equation.Term (Term.Const $1) }
            | LEFT_PAREN add_exp RIGHT_PAREN    { $2 }

mul_exp     : term                              { $1 }
            | mul_exp OP_MUL term               { Equation.Operation ($1, Operator.OpMul, $3) }
            | mul_exp OP_DIV term               { Equation.Operation ($1, Operator.OpDiv, $3) }
            | mul_exp OP_MOD term               { Equation.Operation ($1, Operator.OpMod, $3) }

add_exp     : mul_exp                           { $1 }
            | add_exp OP_ADD mul_exp            { Equation.Operation ($1, Operator.OpAdd, $3) }
            | add_exp OP_SUB mul_exp            { Equation.Operation ($1, Operator.OpSub, $3) }
            | OP_ADD mul_exp                    { $2 }
            | OP_SUB mul_exp                    { Equation.Negate $2 }

boolean_op  : OP_EQ                             { BoolOp.OpEq }
            | OP_LEQ                            { BoolOp.OpLEq }
            | OP_GEQ                            { BoolOp.OpGEq }
            | OP_LT                             { BoolOp.OpLT }
            | OP_GT                             { BoolOp.OpGT }

boolean_exp : LEFT_PAREN add_exp boolean_op add_exp RIGHT_PAREN  { ($2, $3, $4) }

rule        : KW_RULE identifier COL disjunction SC { Statement.Rule ($2, $4) }

state       : KW_STATE identifier COL disjunction SC { Statement.State ($2, $4) }

module      : KW_MODULE identifier module_body  { Declaration.Module ($2, $3) }

module_body : LEFT_BRACE entities RIGHT_BRACE  { List.rev $2 }

entities    :                                   { [] }
            | entity                            { [ Declaration.Entity $1 ] }
            | entities entity                   { (Declaration.Entity $2) :: $1 }

module_list : module                            { [ $1 ]}
            | module_list module                { $2 :: $1 }




