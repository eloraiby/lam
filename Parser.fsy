//
// Lam Reference Compiler
// Copyright (C) 2015  Wael El Oraiby
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

//
// Note: This file complexity is going to be reduced and the error handling is
//       going to be far improved.
//
%{
open UntypedAst
open System
%}

%start start

%token <ConstSInt64> SINT64
%token <ConstReal64> REAL64
%token <ConstString> STRING
%token <ConstChar>   CHAR
%token <ConstBool>   TRUE
%token <ConstBool>   FALSE

%token <Identifier> IDENTIFIER

%token <TokenInfo>  LEFT_BRACE
%token <TokenInfo>  RIGHT_BRACE
%token <TokenInfo>  LEFT_BRACK
%token <TokenInfo>  RIGHT_BRACK
%token <TokenInfo>  LEFT_PAREN
%token <TokenInfo>  RIGHT_PAREN
%token <TokenInfo>  LEFT_HASH
%token <TokenInfo>  RIGHT_HASH
%token <TokenInfo>  COMMA
%token <TokenInfo>  COL
%token <TokenInfo>  DOT
%token <TokenInfo>  SC
%token <TokenInfo>  YIELD
%token <TokenInfo>  OP_LEQ
%token <TokenInfo>  OP_GEQ
%token <TokenInfo>  OP_EQ
%token <TokenInfo>  OP_LT
%token <TokenInfo>  OP_GT

%token <TokenInfo>  SET

%token <TokenInfo>  OP_LAND
%token <TokenInfo>  OP_LOR
%token <TokenInfo>  OP_LNOT

%token <TokenInfo>  OP_ADD
%token <TokenInfo>  OP_SUB
%token <TokenInfo>  OP_MUL
%token <TokenInfo>  OP_DIV
%token <TokenInfo>  OP_MOD

%token <TokenInfo>  OP_AND
%token <TokenInfo>  OP_OR
%token <TokenInfo>  OP_XOR
%token <TokenInfo>  OP_NOT

%token <TokenInfo>  KW_MODULE
%token <TokenInfo>  KW_ENTITY
%token <TokenInfo>  KW_STATE
%token <TokenInfo>  KW_RULE


%token EOF
%type <Declaration list>   start

%%

start       : document                          { $1 }
                                                
document    : EOF                               { [] }
            | module_list                       { List.rev $1 }
                                                
identifier  : IDENTIFIER                        { $1 }

entity      : KW_ENTITY identifier entity_args entity_body  {}

entity_args : LEFT_PAREN args RIGHT_PAREN       {}

var_type    : identifier COL identifier         {}

args        : var_type                          {}
            | args COMMA var_type               {}

entity_body : LEFT_BRACK rs_list RIGHT_BRACK    {}

rs_list     : rule                              {}
            | state                             {}
            | rs_list rule                      {}
            | rs_list state                     {}


conjunction : identifier                        {}
            | boolean_exp                       {}
            | conjunction identifier            {}
            | conjunction boolean_exp           {}

disjunction : conjunction                       {}
            | disjunction OP_OR conjunction     {}

term        : identifier                        {}
            | SINT64                            {}
            | REAL64                            {}
            | LEFT_PAREN add_exp RIGHT_PAREN    {}

mul_exp     : term                              {}
            | mul_exp OP_MUL term               {}
            | mul_exp OP_DIV term               {}
            | mul_exp OP_MOD term               {}

add_exp     : mul_exp                           {}
            | add_exp OP_ADD mul_exp            {}
            | add_exp OP_SUB mul_exp            {}
            | OP_ADD mul_exp                    {}
            | OP_SUB mul_exp                    {}

boolean_op  : OP_EQ                             {}
            | OP_LEQ                            {}
            | OP_GEQ                            {}
            | OP_LT                             {}
            | OP_GT                             {}

boolean_exp : LEFT_PAREN add_exp boolean_op add_exp RIGHT_PAREN  {}

rule        : KW_RULE identifier LEFT_BRACK disjunction RIGHT_BRACK {}

state       : KW_STATE identifier LEFT_BRACK disjunction RIGHT_BRACK {}

module      : KW_MODULE identifier module_body  {}

module_body : LEFT_BRACK entities RIGHT_BRACK   {}

entities    : entity                            {}
            | entities entity                   {}

module_list : module                            {}
            | module_list module                {}




