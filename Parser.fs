// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 23 "Parser.fsy"

open UntypedAst
open System

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | KW_RULE of (TokenInfo)
  | KW_STATE of (TokenInfo)
  | KW_ENTITY of (TokenInfo)
  | KW_MODULE of (TokenInfo)
  | OP_NOT of (TokenInfo)
  | OP_XOR of (TokenInfo)
  | OP_OR of (TokenInfo)
  | OP_AND of (TokenInfo)
  | OP_DISJ of (TokenInfo)
  | OP_MOD of (TokenInfo)
  | OP_DIV of (TokenInfo)
  | OP_MUL of (TokenInfo)
  | OP_SUB of (TokenInfo)
  | OP_ADD of (TokenInfo)
  | OP_LNOT of (TokenInfo)
  | OP_LOR of (TokenInfo)
  | OP_LAND of (TokenInfo)
  | OP_GT of (TokenInfo)
  | OP_LT of (TokenInfo)
  | OP_EQ of (TokenInfo)
  | OP_GEQ of (TokenInfo)
  | OP_LEQ of (TokenInfo)
  | SC of (TokenInfo)
  | DOT of (TokenInfo)
  | COL of (TokenInfo)
  | COMMA of (TokenInfo)
  | RIGHT_HASH of (TokenInfo)
  | LEFT_HASH of (TokenInfo)
  | RIGHT_PAREN of (TokenInfo)
  | LEFT_PAREN of (TokenInfo)
  | RIGHT_BRACK of (TokenInfo)
  | LEFT_BRACK of (TokenInfo)
  | RIGHT_BRACE of (TokenInfo)
  | LEFT_BRACE of (TokenInfo)
  | IDENTIFIER of (Identifier)
  | FALSE of (Constant)
  | TRUE of (Constant)
  | CHAR of (Constant)
  | STRING of (Constant)
  | REAL64 of (Constant)
  | SINT64 of (Constant)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_KW_RULE
    | TOKEN_KW_STATE
    | TOKEN_KW_ENTITY
    | TOKEN_KW_MODULE
    | TOKEN_OP_NOT
    | TOKEN_OP_XOR
    | TOKEN_OP_OR
    | TOKEN_OP_AND
    | TOKEN_OP_DISJ
    | TOKEN_OP_MOD
    | TOKEN_OP_DIV
    | TOKEN_OP_MUL
    | TOKEN_OP_SUB
    | TOKEN_OP_ADD
    | TOKEN_OP_LNOT
    | TOKEN_OP_LOR
    | TOKEN_OP_LAND
    | TOKEN_OP_GT
    | TOKEN_OP_LT
    | TOKEN_OP_EQ
    | TOKEN_OP_GEQ
    | TOKEN_OP_LEQ
    | TOKEN_SC
    | TOKEN_DOT
    | TOKEN_COL
    | TOKEN_COMMA
    | TOKEN_RIGHT_HASH
    | TOKEN_LEFT_HASH
    | TOKEN_RIGHT_PAREN
    | TOKEN_LEFT_PAREN
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACE
    | TOKEN_LEFT_BRACE
    | TOKEN_IDENTIFIER
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_CHAR
    | TOKEN_STRING
    | TOKEN_REAL64
    | TOKEN_SINT64
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_document
    | NONTERM_identifier
    | NONTERM_entity
    | NONTERM_entity_args
    | NONTERM_args
    | NONTERM_entity_body
    | NONTERM_rs_list
    | NONTERM_rule_elem
    | NONTERM_conjunction
    | NONTERM_disjunction
    | NONTERM_term
    | NONTERM_mul_exp
    | NONTERM_add_exp
    | NONTERM_boolean_op
    | NONTERM_boolean_exp
    | NONTERM_rule
    | NONTERM_state
    | NONTERM_module
    | NONTERM_module_body
    | NONTERM_entities
    | NONTERM_module_list

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | KW_RULE _ -> 1 
  | KW_STATE _ -> 2 
  | KW_ENTITY _ -> 3 
  | KW_MODULE _ -> 4 
  | OP_NOT _ -> 5 
  | OP_XOR _ -> 6 
  | OP_OR _ -> 7 
  | OP_AND _ -> 8 
  | OP_DISJ _ -> 9 
  | OP_MOD _ -> 10 
  | OP_DIV _ -> 11 
  | OP_MUL _ -> 12 
  | OP_SUB _ -> 13 
  | OP_ADD _ -> 14 
  | OP_LNOT _ -> 15 
  | OP_LOR _ -> 16 
  | OP_LAND _ -> 17 
  | OP_GT _ -> 18 
  | OP_LT _ -> 19 
  | OP_EQ _ -> 20 
  | OP_GEQ _ -> 21 
  | OP_LEQ _ -> 22 
  | SC _ -> 23 
  | DOT _ -> 24 
  | COL _ -> 25 
  | COMMA _ -> 26 
  | RIGHT_HASH _ -> 27 
  | LEFT_HASH _ -> 28 
  | RIGHT_PAREN _ -> 29 
  | LEFT_PAREN _ -> 30 
  | RIGHT_BRACK _ -> 31 
  | LEFT_BRACK _ -> 32 
  | RIGHT_BRACE _ -> 33 
  | LEFT_BRACE _ -> 34 
  | IDENTIFIER _ -> 35 
  | FALSE _ -> 36 
  | TRUE _ -> 37 
  | CHAR _ -> 38 
  | STRING _ -> 39 
  | REAL64 _ -> 40 
  | SINT64 _ -> 41 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_KW_RULE 
  | 2 -> TOKEN_KW_STATE 
  | 3 -> TOKEN_KW_ENTITY 
  | 4 -> TOKEN_KW_MODULE 
  | 5 -> TOKEN_OP_NOT 
  | 6 -> TOKEN_OP_XOR 
  | 7 -> TOKEN_OP_OR 
  | 8 -> TOKEN_OP_AND 
  | 9 -> TOKEN_OP_DISJ 
  | 10 -> TOKEN_OP_MOD 
  | 11 -> TOKEN_OP_DIV 
  | 12 -> TOKEN_OP_MUL 
  | 13 -> TOKEN_OP_SUB 
  | 14 -> TOKEN_OP_ADD 
  | 15 -> TOKEN_OP_LNOT 
  | 16 -> TOKEN_OP_LOR 
  | 17 -> TOKEN_OP_LAND 
  | 18 -> TOKEN_OP_GT 
  | 19 -> TOKEN_OP_LT 
  | 20 -> TOKEN_OP_EQ 
  | 21 -> TOKEN_OP_GEQ 
  | 22 -> TOKEN_OP_LEQ 
  | 23 -> TOKEN_SC 
  | 24 -> TOKEN_DOT 
  | 25 -> TOKEN_COL 
  | 26 -> TOKEN_COMMA 
  | 27 -> TOKEN_RIGHT_HASH 
  | 28 -> TOKEN_LEFT_HASH 
  | 29 -> TOKEN_RIGHT_PAREN 
  | 30 -> TOKEN_LEFT_PAREN 
  | 31 -> TOKEN_RIGHT_BRACK 
  | 32 -> TOKEN_LEFT_BRACK 
  | 33 -> TOKEN_RIGHT_BRACE 
  | 34 -> TOKEN_LEFT_BRACE 
  | 35 -> TOKEN_IDENTIFIER 
  | 36 -> TOKEN_FALSE 
  | 37 -> TOKEN_TRUE 
  | 38 -> TOKEN_CHAR 
  | 39 -> TOKEN_STRING 
  | 40 -> TOKEN_REAL64 
  | 41 -> TOKEN_SINT64 
  | 44 -> TOKEN_end_of_input
  | 42 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_document 
    | 3 -> NONTERM_document 
    | 4 -> NONTERM_identifier 
    | 5 -> NONTERM_entity 
    | 6 -> NONTERM_entity_args 
    | 7 -> NONTERM_args 
    | 8 -> NONTERM_args 
    | 9 -> NONTERM_entity_body 
    | 10 -> NONTERM_rs_list 
    | 11 -> NONTERM_rs_list 
    | 12 -> NONTERM_rs_list 
    | 13 -> NONTERM_rs_list 
    | 14 -> NONTERM_rs_list 
    | 15 -> NONTERM_rule_elem 
    | 16 -> NONTERM_rule_elem 
    | 17 -> NONTERM_rule_elem 
    | 18 -> NONTERM_rule_elem 
    | 19 -> NONTERM_conjunction 
    | 20 -> NONTERM_conjunction 
    | 21 -> NONTERM_disjunction 
    | 22 -> NONTERM_disjunction 
    | 23 -> NONTERM_term 
    | 24 -> NONTERM_term 
    | 25 -> NONTERM_term 
    | 26 -> NONTERM_term 
    | 27 -> NONTERM_mul_exp 
    | 28 -> NONTERM_mul_exp 
    | 29 -> NONTERM_mul_exp 
    | 30 -> NONTERM_mul_exp 
    | 31 -> NONTERM_add_exp 
    | 32 -> NONTERM_add_exp 
    | 33 -> NONTERM_add_exp 
    | 34 -> NONTERM_add_exp 
    | 35 -> NONTERM_add_exp 
    | 36 -> NONTERM_boolean_op 
    | 37 -> NONTERM_boolean_op 
    | 38 -> NONTERM_boolean_op 
    | 39 -> NONTERM_boolean_op 
    | 40 -> NONTERM_boolean_op 
    | 41 -> NONTERM_boolean_exp 
    | 42 -> NONTERM_rule 
    | 43 -> NONTERM_state 
    | 44 -> NONTERM_module 
    | 45 -> NONTERM_module_body 
    | 46 -> NONTERM_entities 
    | 47 -> NONTERM_entities 
    | 48 -> NONTERM_entities 
    | 49 -> NONTERM_module_list 
    | 50 -> NONTERM_module_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 44 
let _fsyacc_tagOfErrorTerminal = 42

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | KW_RULE _ -> "KW_RULE" 
  | KW_STATE _ -> "KW_STATE" 
  | KW_ENTITY _ -> "KW_ENTITY" 
  | KW_MODULE _ -> "KW_MODULE" 
  | OP_NOT _ -> "OP_NOT" 
  | OP_XOR _ -> "OP_XOR" 
  | OP_OR _ -> "OP_OR" 
  | OP_AND _ -> "OP_AND" 
  | OP_DISJ _ -> "OP_DISJ" 
  | OP_MOD _ -> "OP_MOD" 
  | OP_DIV _ -> "OP_DIV" 
  | OP_MUL _ -> "OP_MUL" 
  | OP_SUB _ -> "OP_SUB" 
  | OP_ADD _ -> "OP_ADD" 
  | OP_LNOT _ -> "OP_LNOT" 
  | OP_LOR _ -> "OP_LOR" 
  | OP_LAND _ -> "OP_LAND" 
  | OP_GT _ -> "OP_GT" 
  | OP_LT _ -> "OP_LT" 
  | OP_EQ _ -> "OP_EQ" 
  | OP_GEQ _ -> "OP_GEQ" 
  | OP_LEQ _ -> "OP_LEQ" 
  | SC _ -> "SC" 
  | DOT _ -> "DOT" 
  | COL _ -> "COL" 
  | COMMA _ -> "COMMA" 
  | RIGHT_HASH _ -> "RIGHT_HASH" 
  | LEFT_HASH _ -> "LEFT_HASH" 
  | RIGHT_PAREN _ -> "RIGHT_PAREN" 
  | LEFT_PAREN _ -> "LEFT_PAREN" 
  | RIGHT_BRACK _ -> "RIGHT_BRACK" 
  | LEFT_BRACK _ -> "LEFT_BRACK" 
  | RIGHT_BRACE _ -> "RIGHT_BRACE" 
  | LEFT_BRACE _ -> "LEFT_BRACE" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | FALSE _ -> "FALSE" 
  | TRUE _ -> "TRUE" 
  | CHAR _ -> "CHAR" 
  | STRING _ -> "STRING" 
  | REAL64 _ -> "REAL64" 
  | SINT64 _ -> "SINT64" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | KW_RULE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KW_STATE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KW_ENTITY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KW_MODULE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_NOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_XOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_DISJ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_MOD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_DIV _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_MUL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_SUB _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_ADD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_LNOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_LOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_LAND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_GT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_LT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_GEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP_LEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_HASH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_HASH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_PAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_PAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_BRACK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_BRACK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_BRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_BRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REAL64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SINT64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 22us; 65535us; 6us; 7us; 10us; 13us; 14us; 15us; 25us; 26us; 29us; 23us; 30us; 23us; 34us; 23us; 38us; 35us; 47us; 35us; 49us; 35us; 51us; 35us; 55us; 35us; 56us; 35us; 57us; 35us; 58us; 35us; 64us; 35us; 65us; 35us; 67us; 68us; 69us; 23us; 71us; 72us; 73us; 23us; 75us; 76us; 2us; 65535us; 78us; 81us; 79us; 82us; 1us; 65535us; 7us; 8us; 1us; 65535us; 10us; 11us; 1us; 65535us; 8us; 9us; 1us; 65535us; 16us; 17us; 5us; 65535us; 29us; 31us; 30us; 31us; 34us; 28us; 69us; 28us; 73us; 28us; 3us; 65535us; 34us; 30us; 69us; 29us; 73us; 29us; 2us; 65535us; 69us; 32us; 73us; 33us; 10us; 65535us; 38us; 41us; 47us; 48us; 49us; 50us; 51us; 52us; 55us; 41us; 56us; 41us; 57us; 41us; 58us; 41us; 64us; 41us; 65us; 41us; 7us; 65535us; 38us; 42us; 55us; 43us; 56us; 44us; 57us; 45us; 58us; 46us; 64us; 42us; 65us; 42us; 3us; 65535us; 38us; 39us; 64us; 53us; 65us; 54us; 1us; 65535us; 53us; 65us; 6us; 65535us; 25us; 27us; 29us; 24us; 30us; 24us; 34us; 24us; 69us; 24us; 73us; 24us; 2us; 65535us; 16us; 19us; 17us; 21us; 2us; 65535us; 16us; 20us; 17us; 22us; 2us; 65535us; 0us; 83us; 4us; 84us; 1us; 65535us; 76us; 77us; 1us; 65535us; 78us; 79us; 1us; 65535us; 0us; 4us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 28us; 31us; 33us; 35us; 37us; 39us; 45us; 49us; 52us; 63us; 71us; 75us; 77us; 84us; 87us; 90us; 93us; 95us; 97us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 2us; 3us; 50us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 2us; 6us; 8us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 3us; 9us; 13us; 14us; 1us; 9us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 2us; 17us; 18us; 1us; 17us; 1us; 18us; 1us; 19us; 2us; 20us; 21us; 2us; 20us; 22us; 1us; 20us; 2us; 22us; 42us; 2us; 22us; 43us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 3us; 26us; 32us; 33us; 1us; 26us; 1us; 27us; 4us; 28us; 29us; 30us; 31us; 4us; 28us; 29us; 30us; 32us; 4us; 28us; 29us; 30us; 33us; 4us; 28us; 29us; 30us; 34us; 4us; 28us; 29us; 30us; 35us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 3us; 32us; 33us; 41us; 3us; 32us; 33us; 41us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 45us; 2us; 45us; 48us; 1us; 45us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 26us; 28us; 30us; 32us; 34us; 36us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 57us; 59us; 61us; 63us; 66us; 69us; 71us; 74us; 77us; 79us; 81us; 83us; 85us; 87us; 91us; 93us; 95us; 100us; 105us; 110us; 115us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 136us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 186us; 188us; 191us; 193us; 195us; 197us; 199us; |]
let _fsyacc_action_rows = 85
let _fsyacc_actionTableElements = [|2us; 32768us; 0us; 3us; 4us; 75us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 1us; 16387us; 4us; 75us; 0us; 16388us; 1us; 32768us; 35us; 5us; 1us; 32768us; 30us; 10us; 1us; 32768us; 34us; 16us; 0us; 16389us; 1us; 32768us; 35us; 5us; 2us; 32768us; 26us; 14us; 29us; 12us; 0us; 16390us; 0us; 16391us; 1us; 32768us; 35us; 5us; 0us; 16392us; 2us; 16394us; 1us; 67us; 2us; 71us; 3us; 32768us; 1us; 67us; 2us; 71us; 33us; 18us; 0us; 16393us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 2us; 32768us; 30us; 64us; 35us; 5us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 3us; 16405us; 15us; 25us; 30us; 64us; 35us; 5us; 3us; 16406us; 15us; 25us; 30us; 64us; 35us; 5us; 0us; 16404us; 2us; 32768us; 9us; 34us; 23us; 70us; 2us; 32768us; 9us; 34us; 23us; 74us; 3us; 32768us; 15us; 25us; 30us; 64us; 35us; 5us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 6us; 32768us; 13us; 58us; 14us; 57us; 30us; 38us; 35us; 5us; 40us; 37us; 41us; 36us; 3us; 32768us; 13us; 56us; 14us; 55us; 29us; 40us; 0us; 16410us; 0us; 16411us; 3us; 16415us; 10us; 51us; 11us; 49us; 12us; 47us; 3us; 16416us; 10us; 51us; 11us; 49us; 12us; 47us; 3us; 16417us; 10us; 51us; 11us; 49us; 12us; 47us; 3us; 16418us; 10us; 51us; 11us; 49us; 12us; 47us; 3us; 16419us; 10us; 51us; 11us; 49us; 12us; 47us; 4us; 32768us; 30us; 38us; 35us; 5us; 40us; 37us; 41us; 36us; 0us; 16412us; 4us; 32768us; 30us; 38us; 35us; 5us; 40us; 37us; 41us; 36us; 0us; 16413us; 4us; 32768us; 30us; 38us; 35us; 5us; 40us; 37us; 41us; 36us; 0us; 16414us; 7us; 32768us; 13us; 56us; 14us; 55us; 18us; 63us; 19us; 62us; 20us; 59us; 21us; 61us; 22us; 60us; 3us; 32768us; 13us; 56us; 14us; 55us; 29us; 66us; 4us; 32768us; 30us; 38us; 35us; 5us; 40us; 37us; 41us; 36us; 4us; 32768us; 30us; 38us; 35us; 5us; 40us; 37us; 41us; 36us; 4us; 32768us; 30us; 38us; 35us; 5us; 40us; 37us; 41us; 36us; 4us; 32768us; 30us; 38us; 35us; 5us; 40us; 37us; 41us; 36us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 6us; 32768us; 13us; 58us; 14us; 57us; 30us; 38us; 35us; 5us; 40us; 37us; 41us; 36us; 6us; 32768us; 13us; 58us; 14us; 57us; 30us; 38us; 35us; 5us; 40us; 37us; 41us; 36us; 0us; 16425us; 1us; 32768us; 35us; 5us; 1us; 32768us; 25us; 69us; 3us; 32768us; 15us; 25us; 30us; 64us; 35us; 5us; 0us; 16426us; 1us; 32768us; 35us; 5us; 1us; 32768us; 25us; 73us; 3us; 32768us; 15us; 25us; 30us; 64us; 35us; 5us; 0us; 16427us; 1us; 32768us; 35us; 5us; 1us; 32768us; 34us; 78us; 0us; 16428us; 1us; 16430us; 3us; 6us; 2us; 32768us; 3us; 6us; 33us; 80us; 0us; 16429us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 6us; 8us; 9us; 11us; 13us; 15us; 16us; 18us; 21us; 22us; 23us; 25us; 26us; 29us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 43us; 44us; 45us; 46us; 50us; 54us; 55us; 58us; 61us; 65us; 66us; 67us; 68us; 75us; 79us; 80us; 81us; 85us; 89us; 93us; 97us; 101us; 106us; 107us; 112us; 113us; 118us; 119us; 127us; 131us; 136us; 141us; 146us; 151us; 152us; 153us; 154us; 155us; 156us; 163us; 170us; 171us; 173us; 175us; 179us; 180us; 182us; 184us; 188us; 189us; 191us; 193us; 194us; 196us; 199us; 200us; 201us; 202us; 203us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 4us; 3us; 1us; 3us; 3us; 0us; 1us; 1us; 2us; 2us; 1us; 1us; 2us; 2us; 1us; 2us; 1us; 3us; 1us; 1us; 1us; 3us; 1us; 3us; 3us; 3us; 1us; 3us; 3us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 5us; 5us; 5us; 3us; 3us; 0us; 1us; 2us; 1us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 5us; 6us; 6us; 7us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 21us; 21us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 16388us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 16390us; 16391us; 65535us; 16392us; 65535us; 65535us; 16393us; 16395us; 16396us; 16397us; 16398us; 16399us; 16400us; 65535us; 16401us; 16402us; 16403us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 16407us; 16408us; 16409us; 65535us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 16413us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 16421us; 16422us; 16423us; 16424us; 65535us; 65535us; 16425us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 16427us; 65535us; 65535us; 16428us; 65535us; 65535us; 16429us; 16431us; 16432us; 16433us; 16434us; |]
let _fsyacc_reductions ()  =    [| 
# 384 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 393 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'document)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                       _1 
                   )
# 92 "Parser.fsy"
                 : Declaration list));
# 404 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                                       [] 
                   )
# 94 "Parser.fsy"
                 : 'document));
# 414 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                                       List.rev _1 
                   )
# 95 "Parser.fsy"
                 : 'document));
# 425 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Identifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                                       _1 
                   )
# 97 "Parser.fsy"
                 : 'identifier));
# 436 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'entity_args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'entity_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                                                   { Entity.Name = _2; Args = _3; Statements = _4 } 
                   )
# 99 "Parser.fsy"
                 : 'entity));
# 450 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'args)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                                       List.rev _2 
                   )
# 101 "Parser.fsy"
                 : 'entity_args));
# 463 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                                       [ _1 ] 
                   )
# 103 "Parser.fsy"
                 : 'args));
# 474 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'args)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                                       _3 :: _1 
                   )
# 104 "Parser.fsy"
                 : 'args));
# 487 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rs_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                                       List.rev _2 
                   )
# 106 "Parser.fsy"
                 : 'entity_body));
# 500 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                                       [] 
                   )
# 108 "Parser.fsy"
                 : 'rs_list));
# 510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                                       [ _1 ] 
                   )
# 109 "Parser.fsy"
                 : 'rs_list));
# 521 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'state)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                                       [ _1 ] 
                   )
# 110 "Parser.fsy"
                 : 'rs_list));
# 532 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rs_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                                       _2 :: _1 
                   )
# 111 "Parser.fsy"
                 : 'rs_list));
# 544 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rs_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'state)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                                       _2 :: _1 
                   )
# 112 "Parser.fsy"
                 : 'rs_list));
# 556 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                                       RuleElem.Identifier _1 
                   )
# 115 "Parser.fsy"
                 : 'rule_elem));
# 567 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : BooleanExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                                       RuleElem.BooleanExp _1 
                   )
# 116 "Parser.fsy"
                 : 'rule_elem));
# 578 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                                       RuleElem.Negate (RuleElem.Identifier _2) 
                   )
# 117 "Parser.fsy"
                 : 'rule_elem));
# 590 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : BooleanExp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                                       RuleElem.Negate (RuleElem.BooleanExp _2) 
                   )
# 118 "Parser.fsy"
                 : 'rule_elem));
# 602 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule_elem)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                                       [ _1 ] 
                   )
# 120 "Parser.fsy"
                 : Conjunctions));
# 613 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Conjunctions)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule_elem)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                                       _2 :: _1 
                   )
# 121 "Parser.fsy"
                 : Conjunctions));
# 625 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Conjunctions)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                                       [ List.rev _1 ] 
                   )
# 123 "Parser.fsy"
                 : 'disjunction));
# 636 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'disjunction)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Conjunctions)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                                       (List.rev _3) :: _1 
                   )
# 124 "Parser.fsy"
                 : 'disjunction));
# 649 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                       Equation.Term (Term.Identifier _1) 
                   )
# 126 "Parser.fsy"
                 : 'term));
# 660 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                                       Equation.Term (Term.Const _1) 
                   )
# 127 "Parser.fsy"
                 : 'term));
# 671 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Constant)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                                                       Equation.Term (Term.Const _1) 
                   )
# 128 "Parser.fsy"
                 : 'term));
# 682 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                                       _2 
                   )
# 129 "Parser.fsy"
                 : 'term));
# 695 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                                       _1 
                   )
# 131 "Parser.fsy"
                 : Equation));
# 706 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                                       Equation.Operation (_1, Operator.OpMul, _3) 
                   )
# 132 "Parser.fsy"
                 : Equation));
# 719 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                                       Equation.Operation (_1, Operator.OpDiv, _3) 
                   )
# 133 "Parser.fsy"
                 : Equation));
# 732 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                                       Equation.Operation (_1, Operator.OpMod, _3) 
                   )
# 134 "Parser.fsy"
                 : Equation));
# 745 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                                       _1 
                   )
# 136 "Parser.fsy"
                 : Equation));
# 756 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                                       Equation.Operation (_1, Operator.OpAdd, _3) 
                   )
# 137 "Parser.fsy"
                 : Equation));
# 769 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                                       Equation.Operation (_1, Operator.OpSub, _3) 
                   )
# 138 "Parser.fsy"
                 : Equation));
# 782 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                                       _2 
                   )
# 139 "Parser.fsy"
                 : Equation));
# 794 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                       Equation.Negate _2 
                   )
# 140 "Parser.fsy"
                 : Equation));
# 806 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                                       BoolOp.OpEq 
                   )
# 142 "Parser.fsy"
                 : 'boolean_op));
# 817 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                                       BoolOp.OpLEq 
                   )
# 143 "Parser.fsy"
                 : 'boolean_op));
# 828 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                                       BoolOp.OpGEq 
                   )
# 144 "Parser.fsy"
                 : 'boolean_op));
# 839 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                                       BoolOp.OpLT 
                   )
# 145 "Parser.fsy"
                 : 'boolean_op));
# 850 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                                       BoolOp.OpGT 
                   )
# 146 "Parser.fsy"
                 : 'boolean_op));
# 861 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'boolean_op)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Equation)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                                                        (_2, _3, _4) 
                   )
# 148 "Parser.fsy"
                 : BooleanExp));
# 876 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'disjunction)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                                           Statement.Rule (_2, List.rev _4) 
                   )
# 150 "Parser.fsy"
                 : 'rule));
# 891 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'disjunction)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                                                            Statement.State (_2, List.rev _4) 
                   )
# 152 "Parser.fsy"
                 : 'state));
# 906 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifier)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                                       Declaration.Module (_2, _3) 
                   )
# 154 "Parser.fsy"
                 : Declaration));
# 919 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'entities)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TokenInfo)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                                                      List.rev _2 
                   )
# 156 "Parser.fsy"
                 : 'module_body));
# 932 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                                                       [] 
                   )
# 158 "Parser.fsy"
                 : 'entities));
# 942 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'entity)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                                       [ Declaration.Entity _1 ] 
                   )
# 159 "Parser.fsy"
                 : 'entities));
# 953 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'entities)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'entity)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                                       (Declaration.Entity _2) :: _1 
                   )
# 160 "Parser.fsy"
                 : 'entities));
# 965 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                                       [ _1 ]
                   )
# 162 "Parser.fsy"
                 : 'module_list));
# 976 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'module_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                                       _2 :: _1 
                   )
# 163 "Parser.fsy"
                 : 'module_list));
|]
# 989 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 45;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Declaration list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
